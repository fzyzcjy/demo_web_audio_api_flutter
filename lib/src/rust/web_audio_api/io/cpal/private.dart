// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `clone`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Stream>>
@sealed
class Stream extends RustOpaque {
  // Not to be used by end users
  Stream.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Stream.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Stream,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Stream,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StreamPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ThreadSafeClosableStream>>
@sealed
class ThreadSafeClosableStream extends RustOpaque {
  // Not to be used by end users
  ThreadSafeClosableStream.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ThreadSafeClosableStream.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ThreadSafeClosableStream,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ThreadSafeClosableStream,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ThreadSafeClosableStreamPtr,
  );

  Future<void> close() => RustLib.instance.api
          .webAudioApiIoCpalPrivateThreadSafeClosableStreamClose(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ThreadSafeClosableStream> newInstance(
          {required Stream stream}) =>
      RustLib.instance.api
          .webAudioApiIoCpalPrivateThreadSafeClosableStreamNew(stream: stream);

  Future<bool> resume() => RustLib.instance.api
          .webAudioApiIoCpalPrivateThreadSafeClosableStreamResume(
        that: this,
      );

  Future<bool> suspend() => RustLib.instance.api
          .webAudioApiIoCpalPrivateThreadSafeClosableStreamSuspend(
        that: this,
      );
}
