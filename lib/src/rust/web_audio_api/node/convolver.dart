// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../buffer.dart';
import '../periodic_wave.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `channel_config`, `clone`, `complex`, `default`, `fmt`, `fmt`, `inverse`, `new`, `new`, `normalize_buffer`, `number_of_inputs`, `number_of_outputs`, `onmessage`, `process`, `process`, `process`, `real`, `registration`, `roll_zero`, `tail`
// These types are ignored because they are not used by any `pub` functions: `ConvolverRendererInner`, `ConvolverRenderer`, `Fft`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvolverNode>>
@sealed
class ConvolverNode extends RustOpaque {
  // Not to be used by end users
  ConvolverNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConvolverNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConvolverNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConvolverNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConvolverNodePtr,
  );

  /// Get the current impulse response buffer
  Future<AudioBuffer?> buffer() =>
      RustLib.instance.api.webAudioApiNodeConvolverConvolverNodeBuffer(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// returns a `ConvolverNode` instance
  ///
  /// # Arguments
  ///
  /// * `context` - audio context in which the audio node will live.
  /// * `options` - convolver options
  ///
  /// # Panics
  ///
  /// Panics when an AudioBuffer is provided via the `ConvolverOptions` with a sample rate
  /// different from the audio context sample rate.
  static Future<ConvolverNode> newInstance(
          {required C context, required ConvolverOptions options}) =>
      RustLib.instance.api.webAudioApiNodeConvolverConvolverNodeNew(
          context: context, options: options);

  /// Denotes if the response buffer will be scaled with an equal-power normalization
  Future<bool> normalize() =>
      RustLib.instance.api.webAudioApiNodeConvolverConvolverNodeNormalize(
        that: this,
      );

  /// Set or update the impulse response buffer
  ///
  /// # Panics
  ///
  /// Panics when the sample rate of the provided AudioBuffer differs from the audio context
  /// sample rate.
  Future<void> setBuffer({required AudioBuffer buffer}) =>
      RustLib.instance.api.webAudioApiNodeConvolverConvolverNodeSetBuffer(
          that: this, buffer: buffer);

  /// Update the `normalize` setting. This will only have an effect when `set_buffer` is called.
  Future<void> setNormalize({required bool value}) =>
      RustLib.instance.api.webAudioApiNodeConvolverConvolverNodeSetNormalize(
          that: this, value: value);
}

/// `ConvolverNode` options
class ConvolverOptions {
  /// The desired buffer for the ConvolverNode
  final AudioBuffer? buffer;

  /// The opposite of the desired initial value for the normalize attribute
  final bool disableNormalization;

  /// AudioNode options
  final AudioNodeOptions audioNodeOptions;

  const ConvolverOptions({
    this.buffer,
    required this.disableNormalization,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      buffer.hashCode ^
      disableNormalization.hashCode ^
      audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConvolverOptions &&
          runtimeType == other.runtimeType &&
          buffer == other.buffer &&
          disableNormalization == other.disableNormalization &&
          audioNodeOptions == other.audioNodeOptions;
}
