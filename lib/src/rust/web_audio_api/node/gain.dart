// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `clone`, `fmt`, `default`, `fmt`, `registration`, `channel_config`, `number_of_inputs`, `number_of_outputs`, `process`
// These types are ignored because they are not used by any `pub` functions: `GainRenderer`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GainNode>>
@sealed
class GainNode extends RustOpaque {
  // Not to be used by end users
  GainNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GainNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GainNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GainNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GainNodePtr,
  );

  Future<AudioParam> gain() =>
      RustLib.instance.api.webAudioApiNodeGainGainNodeGain(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<GainNode> newInstance(
          {required C context, required GainOptions options}) =>
      RustLib.instance.api
          .webAudioApiNodeGainGainNodeNew(context: context, options: options);
}

/// Options for constructing a [`GainNode`]
class GainOptions {
  final double gain;
  final AudioNodeOptions audioNodeOptions;

  const GainOptions({
    required this.gain,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode => gain.hashCode ^ audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GainOptions &&
          runtimeType == other.runtimeType &&
          gain == other.gain &&
          audioNodeOptions == other.audioNodeOptions;
}
