// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `assert_valid_number_of_channels`, `assert_valid_channel_count`, `assert_valid_channel_count_mode`, `clone`, `fmt`, `default`, `fmt`, `registration`, `channel_config`, `set_channel_count`, `set_channel_count_mode`, `number_of_inputs`, `number_of_outputs`, `fmt`, `process`
// These types are ignored because they are not used by any `pub` functions: `ChannelMergerRenderer`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelMergerNode>>
@sealed
class ChannelMergerNode extends RustOpaque {
  // Not to be used by end users
  ChannelMergerNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChannelMergerNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChannelMergerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChannelMergerNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelMergerNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ChannelMergerNode> newInstance(
          {required C context, required ChannelMergerOptions options}) =>
      RustLib.instance.api.webAudioApiNodeChannelMergerChannelMergerNodeNew(
          context: context, options: options);
}

/// Options for constructing a [`ChannelMergerNode`]
class ChannelMergerOptions {
  final BigInt numberOfInputs;
  final AudioNodeOptions audioNodeOptions;

  const ChannelMergerOptions({
    required this.numberOfInputs,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode => numberOfInputs.hashCode ^ audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ChannelMergerOptions &&
          runtimeType == other.runtimeType &&
          numberOfInputs == other.numberOfInputs &&
          audioNodeOptions == other.audioNodeOptions;
}
