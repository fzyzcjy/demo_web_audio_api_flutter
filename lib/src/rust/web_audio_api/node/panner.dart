// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `assert_valid_cone_outer_gain`, `load_hrtf_processor`, `assert_valid_channel_count`, `assert_valid_channel_count_mode`, `apply_mono_to_stereo_gain`, `apply_stereo_to_stereo_gain`, `fmt`, `clone`, `eq`, `assert_receiver_is_total_eq`, `default`, `from`, `fmt`, `clone`, `eq`, `assert_receiver_is_total_eq`, `default`, `from`, `clone`, `fmt`, `default`, `new`, `process`, `tail_time_samples`, `fmt`, `registration`, `channel_config`, `number_of_inputs`, `number_of_outputs`, `set_channel_count`, `set_channel_count_mode`, `clone`, `process`, `onmessage`, `cone_gain`, `dist_gain`
// These types are ignored because they are not used by any `pub` functions: `PannerRenderer`, `HrtfState`, `SpatialParams`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>
@sealed
class PannerNode extends RustOpaque {
  // Not to be used by end users
  PannerNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PannerNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PannerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNodePtr,
  );

  Future<double> coneInnerAngle() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeConeInnerAngle(
        that: this,
      );

  Future<double> coneOuterAngle() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeConeOuterAngle(
        that: this,
      );

  Future<double> coneOuterGain() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeConeOuterGain(
        that: this,
      );

  Future<DistanceModelType> distanceModel() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeDistanceModel(
        that: this,
      );

  Future<double> maxDistance() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeMaxDistance(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// returns a `PannerNode` instance
  ///
  /// # Arguments
  ///
  /// * `context` - audio context in which the audio node will live.
  /// * `options` - stereo panner options
  ///
  /// # Panics
  ///
  /// Will panic if:
  ///
  /// * `options.channel_config.count` is greater than 2
  /// * `options.channel_config.mode` is `ChannelCountMode::Max`
  ///
  /// Can panic when loading HRIR-sphere
  static Future<PannerNode> newInstance(
          {required C context, required PannerOptions options}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeNew(
          context: context, options: options);

  Future<AudioParam> orientationX() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeOrientationX(
        that: this,
      );

  Future<AudioParam> orientationY() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeOrientationY(
        that: this,
      );

  Future<AudioParam> orientationZ() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeOrientationZ(
        that: this,
      );

  Future<PanningModelType> panningModel() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodePanningModel(
        that: this,
      );

  Future<AudioParam> positionX() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodePositionX(
        that: this,
      );

  Future<AudioParam> positionY() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodePositionY(
        that: this,
      );

  Future<AudioParam> positionZ() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodePositionZ(
        that: this,
      );

  Future<double> refDistance() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeRefDistance(
        that: this,
      );

  Future<double> rolloffFactor() =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeRolloffFactor(
        that: this,
      );

  Future<void> setConeInnerAngle({required double value}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetConeInnerAngle(
          that: this, value: value);

  Future<void> setConeOuterAngle({required double value}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetConeOuterAngle(
          that: this, value: value);

  /// Set the coneOuterGain attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is not in the range [0, 1]
  Future<void> setConeOuterGain({required double value}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetConeOuterGain(
          that: this, value: value);

  Future<void> setDistanceModel({required DistanceModelType value}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetDistanceModel(
          that: this, value: value);

  /// Set the maxDistance attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setMaxDistance({required double value}) => RustLib.instance.api
      .webAudioApiNodePannerPannerNodeSetMaxDistance(that: this, value: value);

  Future<void> setOrientation(
          {required double x, required double y, required double z}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetOrientation(
          that: this, x: x, y: y, z: z);

  Future<void> setPanningModel({required PanningModelType value}) => RustLib
      .instance.api
      .webAudioApiNodePannerPannerNodeSetPanningModel(that: this, value: value);

  Future<void> setPosition(
          {required double x, required double y, required double z}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetPosition(
          that: this, x: x, y: y, z: z);

  /// Set the refDistance attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setRefDistance({required double value}) => RustLib.instance.api
      .webAudioApiNodePannerPannerNodeSetRefDistance(that: this, value: value);

  /// Set the rolloffFactor attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setRolloffFactor({required double value}) =>
      RustLib.instance.api.webAudioApiNodePannerPannerNodeSetRolloffFactor(
          that: this, value: value);
}

/// Algorithm to reduce the volume of an audio source as it moves away from the listener
enum DistanceModelType {
  linear,
  inverse,
  exponential,
  ;
}

/// Options for constructing a [`PannerNode`]
class PannerOptions {
  final PanningModelType panningModel;
  final DistanceModelType distanceModel;
  final double positionX;
  final double positionY;
  final double positionZ;
  final double orientationX;
  final double orientationY;
  final double orientationZ;
  final double refDistance;
  final double maxDistance;
  final double rolloffFactor;
  final double coneInnerAngle;
  final double coneOuterAngle;
  final double coneOuterGain;
  final AudioNodeOptions audioNodeOptions;

  const PannerOptions({
    required this.panningModel,
    required this.distanceModel,
    required this.positionX,
    required this.positionY,
    required this.positionZ,
    required this.orientationX,
    required this.orientationY,
    required this.orientationZ,
    required this.refDistance,
    required this.maxDistance,
    required this.rolloffFactor,
    required this.coneInnerAngle,
    required this.coneOuterAngle,
    required this.coneOuterGain,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      panningModel.hashCode ^
      distanceModel.hashCode ^
      positionX.hashCode ^
      positionY.hashCode ^
      positionZ.hashCode ^
      orientationX.hashCode ^
      orientationY.hashCode ^
      orientationZ.hashCode ^
      refDistance.hashCode ^
      maxDistance.hashCode ^
      rolloffFactor.hashCode ^
      coneInnerAngle.hashCode ^
      coneOuterAngle.hashCode ^
      coneOuterGain.hashCode ^
      audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PannerOptions &&
          runtimeType == other.runtimeType &&
          panningModel == other.panningModel &&
          distanceModel == other.distanceModel &&
          positionX == other.positionX &&
          positionY == other.positionY &&
          positionZ == other.positionZ &&
          orientationX == other.orientationX &&
          orientationY == other.orientationY &&
          orientationZ == other.orientationZ &&
          refDistance == other.refDistance &&
          maxDistance == other.maxDistance &&
          rolloffFactor == other.rolloffFactor &&
          coneInnerAngle == other.coneInnerAngle &&
          coneOuterAngle == other.coneOuterAngle &&
          coneOuterGain == other.coneOuterGain &&
          audioNodeOptions == other.audioNodeOptions;
}

/// Spatialization algorithm used to position the audio in 3D space
enum PanningModelType {
  equalPower,
  hrtf,
  ;
}
