// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `clone`, `fmt`, `default`, `clone`, `fmt`, `default`, `fmt`, `registration`, `channel_config`, `number_of_inputs`, `number_of_outputs`, `connect_from_output_to_input`, `disconnect`, `disconnect_dest`, `disconnect_output`, `disconnect_dest_from_output`, `disconnect_dest_from_output_to_input`, `drop`, `ring_buffer_mut`, `process`, `has_side_effects`, `check_ring_buffer_up_down_mix`, `ring_buffer_mut`, `process`, `get_playback_infos`
// These types are ignored because they are not used by any `pub` functions: `DelayReader`, `PlaybackInfo`, `DelayWriter`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DelayNode>>
@sealed
class DelayNode extends RustOpaque {
  // Not to be used by end users
  DelayNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DelayNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DelayNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DelayNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DelayNodePtr,
  );

  /// A-rate [`AudioParam`] representing the amount of delay (in seconds) to apply.
  Future<AudioParam> delayTime() =>
      RustLib.instance.api.webAudioApiNodeDelayDelayNodeDelayTime(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new DelayNode
  ///
  /// # Panics
  ///
  /// Panics when the max delay value is smaller than zero or langer than three minutes.
  static Future<DelayNode> newInstance(
          {required C context, required DelayOptions options}) =>
      RustLib.instance.api
          .webAudioApiNodeDelayDelayNodeNew(context: context, options: options);
}

/// Options for constructing a [`DelayNode`]
class DelayOptions {
  final double maxDelayTime;
  final double delayTime;
  final AudioNodeOptions audioNodeOptions;

  const DelayOptions({
    required this.maxDelayTime,
    required this.delayTime,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      maxDelayTime.hashCode ^ delayTime.hashCode ^ audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DelayOptions &&
          runtimeType == other.runtimeType &&
          maxDelayTime == other.maxDelayTime &&
          delayTime == other.delayTime &&
          audioNodeOptions == other.audioNodeOptions;
}
