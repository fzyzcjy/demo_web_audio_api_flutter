// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import '../periodic_wave.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `before_drop`, `channel_config`, `clone`, `clone`, `default`, `fmt`, `fmt`, `fmt`, `number_of_inputs`, `number_of_outputs`, `onmessage`, `process`, `registration`, `start_at`, `start`, `stop_at`, `stop`
// These types are ignored because they are not used by any `pub` functions: `ConstantSourceRenderer`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>
@sealed
class ConstantSourceNode extends RustOpaque {
  // Not to be used by end users
  ConstantSourceNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConstantSourceNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConstantSourceNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ConstantSourceNode> newInstance(
          {required C context, required ConstantSourceOptions options}) =>
      RustLib.instance.api.webAudioApiNodeConstantSourceConstantSourceNodeNew(
          context: context, options: options);

  Future<AudioParam> offset() => RustLib.instance.api
          .webAudioApiNodeConstantSourceConstantSourceNodeOffset(
        that: this,
      );
}

/// Options for constructing an [`ConstantSourceNode`]
class ConstantSourceOptions {
  /// Initial parameter value of the constant signal
  final double offset;

  const ConstantSourceOptions({
    required this.offset,
  });

  @override
  int get hashCode => offset.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConstantSourceOptions &&
          runtimeType == other.runtimeType &&
          offset == other.offset;
}
