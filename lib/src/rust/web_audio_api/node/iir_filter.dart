// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../buffer.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `assert_valid_feedforward_coefs`, `assert_valid_feedback_coefs`, `clone`, `fmt`, `fmt`, `registration`, `channel_config`, `number_of_inputs`, `number_of_outputs`, `new`, `process`
// These types are ignored because they are not used by any `pub` functions: `IirFilterRenderer`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IIRFilterNode>>
@sealed
class IirFilterNode extends RustOpaque {
  // Not to be used by end users
  IirFilterNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IirFilterNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IirFilterNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IirFilterNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IirFilterNodePtr,
  );

  /// Returns the frequency response for the specified frequencies
  ///
  /// # Arguments
  ///
  /// - `frequency_hz` - frequencies for which frequency response of the filter should be calculated
  /// - `mag_response` - magnitude of the frequency response of the filter
  /// - `phase_response` - phase of the frequency response of the filter
  ///
  /// # Panics
  ///
  /// This function will panic if arguments' lengths don't match
  ///
  Future<void> getFrequencyResponse(
          {required F32 frequencyHz,
          required F32 magResponse,
          required F32 phaseResponse}) =>
      RustLib.instance.api
          .webAudioApiNodeIirFilterIirFilterNodeGetFrequencyResponse(
              that: this,
              frequencyHz: frequencyHz,
              magResponse: magResponse,
              phaseResponse: phaseResponse);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates an `IirFilterNode`
  ///
  /// # Arguments
  ///
  /// - `context` - Audio context in which the node will live
  /// - `options` - node options
  ///
  /// # Panics
  ///
  /// This function panics if:
  /// - coefs length is 0 and greater than 20
  /// - feedforward coefs are all zeros
  /// - feedback first coef is zero
  ///
  static Future<IirFilterNode> newInstance(
          {required C context, required IIRFilterOptions options}) =>
      RustLib.instance.api.webAudioApiNodeIirFilterIirFilterNodeNew(
          context: context, options: options);
}

/// Options for constructing a [`IIRFilterNode`]
class IIRFilterOptions {
  /// audio node options
  final AudioNodeOptions audioNodeOptions;

  /// feedforward coefficients
  final Float64List feedforward;

  /// feedback coefficients
  final Float64List feedback;

  const IIRFilterOptions({
    required this.audioNodeOptions,
    required this.feedforward,
    required this.feedback,
  });

  @override
  int get hashCode =>
      audioNodeOptions.hashCode ^ feedforward.hashCode ^ feedback.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is IIRFilterOptions &&
          runtimeType == other.runtimeType &&
          audioNodeOptions == other.audioNodeOptions &&
          feedforward == other.feedforward &&
          feedback == other.feedback;
}
