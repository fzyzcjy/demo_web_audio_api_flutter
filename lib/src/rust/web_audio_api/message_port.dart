// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'capacity.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `fmt`, `from_node`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<M>>
@sealed
class M extends RustOpaque {
  // Not to be used by end users
  M.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  M.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_M,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_M,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessagePort>>
@sealed
class MessagePort extends RustOpaque {
  // Not to be used by end users
  MessagePort.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessagePort.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessagePort,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessagePort,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessagePortPtr,
  );

  /// Unset the callback to run when a message arrives on the channel.
  Future<void> clearOnmessage() =>
      RustLib.instance.api.webAudioApiMessagePortMessagePortClearOnmessage(
        that: this,
      );

  /// Send a message from the port.
  Future<void> postMessage({required M msg}) => RustLib.instance.api
      .webAudioApiMessagePortMessagePortPostMessage(that: this, msg: msg);

  /// Register callback to run when a message arrives on the channel.
  ///
  /// Only a single event handler is active at any time. Calling this method multiple times will
  /// override the previous event handler.
  Future<void> setOnmessage({required F callback}) =>
      RustLib.instance.api.webAudioApiMessagePortMessagePortSetOnmessage(
          that: this, callback: callback);
}
