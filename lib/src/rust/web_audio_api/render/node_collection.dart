// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../context.dart';
import 'graph.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `fmt`, `ensure_capacity`
// These functions have error during generation (see debug logs for more details): `keys`, `values_mut`, `iter_mut`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NodeCollection>>
@sealed
class NodeCollection extends RustOpaque {
  // Not to be used by end users
  NodeCollection.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NodeCollection.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NodeCollection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodeCollection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodeCollectionPtr,
  );

  Future<bool> contains({required AudioNodeId index}) => RustLib.instance.api
      .webAudioApiRenderNodeCollectionNodeCollectionContains(
          that: this, index: index);

  Future<RefCellNode?> getMut({required AudioNodeId index}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionGetMut(
          that: this, index: index);

  Future<RefCellNode> getUnchecked({required AudioNodeId index}) =>
      RustLib.instance.api
          .webAudioApiRenderNodeCollectionNodeCollectionGetUnchecked(
              that: this, index: index);

  Future<Node> getUncheckedMut({required AudioNodeId index}) => RustLib
      .instance.api
      .webAudioApiRenderNodeCollectionNodeCollectionGetUncheckedMut(
          that: this, index: index);

  Future<void> insert(
          {required AudioNodeId index, required RefCellNode value}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionInsert(
          that: this, index: index, value: value);

  Future<bool> isEmpty() =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionIsEmpty(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<NodeCollection> newInstance() =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionNew();

  Future<RefCellNode> remove({required AudioNodeId index}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionRemove(
          that: this, index: index);
}

class NodeCollection {
  final List<RefCellNode?> nodes;

  const NodeCollection({
    required this.nodes,
  });

  Future<bool> contains({required AudioNodeId index}) => RustLib.instance.api
      .webAudioApiRenderNodeCollectionNodeCollectionContains(
          that: this, index: index);

  Future<RefCellNode?> getMut({required AudioNodeId index}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionGetMut(
          that: this, index: index);

  Future<RefCellNode> getUnchecked({required AudioNodeId index}) =>
      RustLib.instance.api
          .webAudioApiRenderNodeCollectionNodeCollectionGetUnchecked(
              that: this, index: index);

  Future<Node> getUncheckedMut({required AudioNodeId index}) => RustLib
      .instance.api
      .webAudioApiRenderNodeCollectionNodeCollectionGetUncheckedMut(
          that: this, index: index);

  Future<void> insert(
          {required AudioNodeId index, required RefCellNode value}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionInsert(
          that: this, index: index, value: value);

  Future<bool> isEmpty() =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionIsEmpty(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<NodeCollection> newInstance() =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionNew();

  Future<RefCellNode> remove({required AudioNodeId index}) =>
      RustLib.instance.api.webAudioApiRenderNodeCollectionNodeCollectionRemove(
          that: this, index: index);

  @override
  int get hashCode => nodes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NodeCollection &&
          runtimeType == other.runtimeType &&
          nodes == other.nodes;
}
