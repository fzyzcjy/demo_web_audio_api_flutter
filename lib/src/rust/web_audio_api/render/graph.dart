// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../context.dart';
import '../node/audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'processor.dart';
import 'quantum.dart';

// These functions are ignored because they are not marked as `pub`: `fmt`, `fmt`, `process`, `can_free`, `fmt`, `visit`, `order_nodes`
// These types are ignored because they are not used by any `pub` functions: `OutgoingEdge`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn AudioProcessor >>>
@sealed
class BoxAudioProcessor extends RustOpaque {
  // Not to be used by end users
  BoxAudioProcessor.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxAudioProcessor.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxAudioProcessor,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxAudioProcessor,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAudioProcessorPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Graph>>
@sealed
class Graph extends RustOpaque {
  // Not to be used by end users
  Graph.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Graph.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Graph,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Graph,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GraphPtr,
  );

  Future<void> addEdge(
          {required (AudioNodeId, BigInt) source,
          required (AudioNodeId, BigInt) dest}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphAddEdge(
          that: this, source: source, dest: dest);

  Future<void> addNode(
          {required AudioNodeId index,
          required Node reclaimId,
          required BoxAudioProcessor processor,
          required BigInt numberOfInputs,
          required BigInt numberOfOutputs,
          required ChannelConfigInner channelConfig}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphAddNode(
          that: this,
          index: index,
          reclaimId: reclaimId,
          processor: processor,
          numberOfInputs: numberOfInputs,
          numberOfOutputs: numberOfOutputs,
          channelConfig: channelConfig);

  Future<void> beforeDrop({required AudioWorkletGlobalScope scope}) =>
      RustLib.instance.api
          .webAudioApiRenderGraphGraphBeforeDrop(that: this, scope: scope);

  /// Check if the graph is fully initialized and can start rendering
  Future<bool> isActive() =>
      RustLib.instance.api.webAudioApiRenderGraphGraphIsActive(
        that: this,
      );

  Future<void> markControlHandleDropped({required AudioNodeId index}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphMarkControlHandleDropped(
          that: this, index: index);

  Future<void> markCycleBreaker({required AudioNodeId index}) => RustLib
      .instance.api
      .webAudioApiRenderGraphGraphMarkCycleBreaker(that: this, index: index);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Graph> newInstance(
          {required LlqProducerAudioNodeId reclaimIdChannel}) =>
      RustLib.instance.api
          .webAudioApiRenderGraphGraphNew(reclaimIdChannel: reclaimIdChannel);

  Future<void> removeEdge(
          {required (AudioNodeId, BigInt) source,
          required (AudioNodeId, BigInt) dest}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphRemoveEdge(
          that: this, source: source, dest: dest);

  /// Render a single audio quantum by traversing the node list
  Future<AudioRenderQuantum> render({required AudioWorkletGlobalScope scope}) =>
      RustLib.instance.api
          .webAudioApiRenderGraphGraphRender(that: this, scope: scope);

  Future<void> routeMessage({required AudioNodeId index, required Any msg}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphRouteMessage(
          that: this, index: index, msg: msg);

  Future<void> setChannelCount(
          {required AudioNodeId index, required BigInt v}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphSetChannelCount(
          that: this, index: index, v: v);

  Future<void> setChannelCountMode(
          {required AudioNodeId index, required ChannelCountMode v}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphSetChannelCountMode(
          that: this, index: index, v: v);

  Future<void> setChannelInterpretation(
          {required AudioNodeId index, required ChannelInterpretation v}) =>
      RustLib.instance.api.webAudioApiRenderGraphGraphSetChannelInterpretation(
          that: this, index: index, v: v);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Node>>
@sealed
class Node extends RustOpaque {
  // Not to be used by end users
  Node.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Node.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Node,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Node,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodePtr,
  );

  /// Get the current buffer for AudioParam values
  Future<AudioRenderQuantum> getBuffer() =>
      RustLib.instance.api.webAudioApiRenderGraphNodeGetBuffer(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefCell < Node >>>
@sealed
class RefCellNode extends RustOpaque {
  // Not to be used by end users
  RefCellNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RefCellNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RefCellNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RefCellNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RefCellNodePtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<dyn Any>>
@sealed
class Any extends RustOpaque {
  // Not to be used by end users
  Any.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Any.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Any,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Any,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnyPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<llq :: Producer < AudioNodeId >>>
@sealed
class LlqProducerAudioNodeId extends RustOpaque {
  // Not to be used by end users
  LlqProducerAudioNodeId.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LlqProducerAudioNodeId.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LlqProducerAudioNodeId,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LlqProducerAudioNodeId,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LlqProducerAudioNodeIdPtr,
  );
}
