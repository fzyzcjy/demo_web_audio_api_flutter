// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'node/analyser.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'param.dart';

// These functions are ignored because they are not marked as `pub`: `fmt`, `registration`, `channel_config`, `number_of_inputs`, `number_of_outputs`, `set_channel_count`, `set_channel_count_mode`, `set_channel_interpretation`, `process`
// These types are ignored because they are not used by any `pub` functions: `ListenerRenderer`

/// Direction to source position measured from listener in 3D
Future<(double, double)> azimuthAndElevation(
        {required Vector3F32 sourcePosition,
        required Vector3F32 listenerPosition,
        required Vector3F32 listenerForward,
        required Vector3F32 listenerUp}) =>
    RustLib.instance.api.webAudioApiSpatialAzimuthAndElevation(
        sourcePosition: sourcePosition,
        listenerPosition: listenerPosition,
        listenerForward: listenerForward,
        listenerUp: listenerUp);

/// Distance between two points in 3D
Future<double> distance(
        {required Vector3F32 sourcePosition,
        required Vector3F32 listenerPosition}) =>
    RustLib.instance.api.webAudioApiSpatialDistance(
        sourcePosition: sourcePosition, listenerPosition: listenerPosition);

/// Angle between two vectors in 3D
Future<double> angle(
        {required Vector3F32 sourcePosition,
        required Vector3F32 sourceOrientation,
        required Vector3F32 listenerPosition}) =>
    RustLib.instance.api.webAudioApiSpatialAngle(
        sourcePosition: sourcePosition,
        sourceOrientation: sourceOrientation,
        listenerPosition: listenerPosition);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListener>>
@sealed
class AudioListener extends RustOpaque {
  // Not to be used by end users
  AudioListener.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioListener.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioListener,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioListener,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioListenerPtr,
  );

  Future<AudioParam> forwardX() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerForwardX(
        that: this,
      );

  Future<AudioParam> forwardY() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerForwardY(
        that: this,
      );

  Future<AudioParam> forwardZ() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerForwardZ(
        that: this,
      );

  Future<AudioParam> positionX() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerPositionX(
        that: this,
      );

  Future<AudioParam> positionY() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerPositionY(
        that: this,
      );

  Future<AudioParam> positionZ() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerPositionZ(
        that: this,
      );

  Future<AudioParam> upX() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerUpX(
        that: this,
      );

  Future<AudioParam> upY() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerUpY(
        that: this,
      );

  Future<AudioParam> upZ() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerUpZ(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListenerNode>>
@sealed
class AudioListenerNode extends RustOpaque {
  // Not to be used by end users
  AudioListenerNode.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioListenerNode.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioListenerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioListenerNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioListenerNodePtr,
  );

  Future<AudioListener> intoFields() =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerNodeIntoFields(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<AudioListenerNode> newInstance({required C context}) =>
      RustLib.instance.api
          .webAudioApiSpatialAudioListenerNodeNew(context: context);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListenerParams>>
@sealed
class AudioListenerParams extends RustOpaque {
  // Not to be used by end users
  AudioListenerParams.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioListenerParams.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AudioListenerParams,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioListenerParams,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioListenerParamsPtr,
  );

  AudioParamInner get forwardX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardX(
        that: this,
      );

  AudioParamInner get forwardY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardY(
        that: this,
      );

  AudioParamInner get forwardZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardZ(
        that: this,
      );

  AudioParamInner get positionX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionX(
        that: this,
      );

  AudioParamInner get positionY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionY(
        that: this,
      );

  AudioParamInner get positionZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionZ(
        that: this,
      );

  AudioParamInner get upX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpX(
        that: this,
      );

  AudioParamInner get upY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpY(
        that: this,
      );

  AudioParamInner get upZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpZ(
        that: this,
      );

  void set forwardX(AudioParamInner forwardX) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardX(
          that: this, forwardX: forwardX);

  void set forwardY(AudioParamInner forwardY) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardY(
          that: this, forwardY: forwardY);

  void set forwardZ(AudioParamInner forwardZ) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardZ(
          that: this, forwardZ: forwardZ);

  void set positionX(AudioParamInner positionX) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionX(
          that: this, positionX: positionX);

  void set positionY(AudioParamInner positionY) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionY(
          that: this, positionY: positionY);

  void set positionZ(AudioParamInner positionZ) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionZ(
          that: this, positionZ: positionZ);

  void set upX(AudioParamInner upX) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpX(that: this, upX: upX);

  void set upY(AudioParamInner upY) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpY(that: this, upY: upY);

  void set upZ(AudioParamInner upZ) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpZ(that: this, upZ: upZ);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Vector3 < f32 >>>
@sealed
class Vector3F32 extends RustOpaque {
  // Not to be used by end users
  Vector3F32.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Vector3F32.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Vector3F32,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Vector3F32,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Vector3F32Ptr,
  );
}
