// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'param.dart';

// These types are ignored because they are not used by any `pub` functions: `ListenerRenderer`, `AudioListenerNode`, `AudioListener`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioListenerParams>>
@sealed
class AudioListenerParams extends RustOpaque {
  // Not to be used by end users
  AudioListenerParams.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AudioListenerParams.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AudioListenerParams,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioListenerParams,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioListenerParamsPtr,
  );

  AudioParamInner get forwardX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardX(
        that: this,
      );

  AudioParamInner get forwardY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardY(
        that: this,
      );

  AudioParamInner get forwardZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetForwardZ(
        that: this,
      );

  AudioParamInner get positionX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionX(
        that: this,
      );

  AudioParamInner get positionY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionY(
        that: this,
      );

  AudioParamInner get positionZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetPositionZ(
        that: this,
      );

  AudioParamInner get upX =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpX(
        that: this,
      );

  AudioParamInner get upY =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpY(
        that: this,
      );

  AudioParamInner get upZ =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsGetUpZ(
        that: this,
      );

  void set forwardX(AudioParamInner forwardX) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardX(
          that: this, forwardX: forwardX);

  void set forwardY(AudioParamInner forwardY) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardY(
          that: this, forwardY: forwardY);

  void set forwardZ(AudioParamInner forwardZ) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetForwardZ(
          that: this, forwardZ: forwardZ);

  void set positionX(AudioParamInner positionX) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionX(
          that: this, positionX: positionX);

  void set positionY(AudioParamInner positionY) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionY(
          that: this, positionY: positionY);

  void set positionZ(AudioParamInner positionZ) =>
      RustLib.instance.api.webAudioApiSpatialAudioListenerParamsSetPositionZ(
          that: this, positionZ: positionZ);

  void set upX(AudioParamInner upX) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpX(that: this, upX: upX);

  void set upY(AudioParamInner upY) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpY(that: this, upY: upY);

  void set upZ(AudioParamInner upZ) => RustLib.instance.api
      .webAudioApiSpatialAudioListenerParamsSetUpZ(that: this, upZ: upZ);
}
