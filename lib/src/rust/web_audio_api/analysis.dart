// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'buffer.dart';
import 'node/analyser.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `generate_blackman`, `assert_valid_fft_size`, `assert_valid_smoothing_time_constant`, `assert_valid_decibels`, `clone`, `fmt`, `compute_fft`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Analyser>>
@sealed
class Analyser extends RustOpaque {
  // Not to be used by end users
  Analyser.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Analyser.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Analyser,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Analyser,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnalyserPtr,
  );

  Future<BigInt> fftSize() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserFftSize(
        that: this,
      );

  Future<BigInt> frequencyBinCount() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserFrequencyBinCount(
        that: this,
      );

  Future<void> getByteFrequencyData(
          {required U8 dst, required double currentTime}) =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserGetByteFrequencyData(
          that: this, dst: dst, currentTime: currentTime);

  Future<void> getByteTimeDomainData({required U8 dst}) => RustLib.instance.api
      .webAudioApiAnalysisAnalyserGetByteTimeDomainData(that: this, dst: dst);

  Future<void> getFloatFrequencyData(
          {required F32 dst, required double currentTime}) =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserGetFloatFrequencyData(
          that: this, dst: dst, currentTime: currentTime);

  Future<void> getFloatTimeDomainData({required F32 dst}) => RustLib
      .instance.api
      .webAudioApiAnalysisAnalyserGetFloatTimeDomainData(that: this, dst: dst);

  Future<AnalyserRingBuffer> getRingBufferClone() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserGetRingBufferClone(
        that: this,
      );

  Future<double> maxDecibels() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserMaxDecibels(
        that: this,
      );

  Future<double> minDecibels() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserMinDecibels(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Analyser> newInstance() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserNew();

  Future<void> setDecibels({required double min, required double max}) =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserSetDecibels(
          that: this, min: min, max: max);

  Future<void> setFftSize({required BigInt fftSize}) => RustLib.instance.api
      .webAudioApiAnalysisAnalyserSetFftSize(that: this, fftSize: fftSize);

  Future<void> setSmoothingTimeConstant({required double value}) =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserSetSmoothingTimeConstant(
          that: this, value: value);

  Future<double> smoothingTimeConstant() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserSmoothingTimeConstant(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AnalyserRingBuffer>>
@sealed
class AnalyserRingBuffer extends RustOpaque {
  // Not to be used by end users
  AnalyserRingBuffer.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AnalyserRingBuffer.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AnalyserRingBuffer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnalyserRingBuffer,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AnalyserRingBufferPtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<AnalyserRingBuffer> newInstance() =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserRingBufferNew();

  Future<void> read({required F32 dst, required BigInt maxLen}) =>
      RustLib.instance.api.webAudioApiAnalysisAnalyserRingBufferRead(
          that: this, dst: dst, maxLen: maxLen);

  Future<void> write({required F32 src}) => RustLib.instance.api
      .webAudioApiAnalysisAnalyserRingBufferWrite(that: this, src: src);
}
